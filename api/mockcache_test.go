// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"github.com/ONSdigital/dp-sessions-api/session"
	"sync"
)

var (
	lockCacheMockGet sync.RWMutex
	lockCacheMockSet sync.RWMutex
)

// Ensure, that CacheMock does implement Cache.
// If this is not the case, regenerate this file with moq.
var _ Cache = &CacheMock{}

// CacheMock is a mock implementation of Cache.
//
//     func TestSomethingThatUsesCache(t *testing.T) {
//
//         // make and configure a mocked Cache
//         mockedCache := &CacheMock{
//             GetFunc: func(email string) (*session.Session, error) {
// 	               panic("mock out the Get method")
//             },
//             SetFunc: func(s *session.Session)  {
// 	               panic("mock out the Set method")
//             },
//         }
//
//         // use mockedCache in code that requires Cache
//         // and then make assertions.
//
//     }
type CacheMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(email string) (*session.Session, error)

	// SetFunc mocks the Set method.
	SetFunc func(s *session.Session)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Email is the email argument value.
			Email string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// S is the s argument value.
			S *session.Session
		}
	}
}

// Get calls GetFunc.
func (mock *CacheMock) Get(email string) (*session.Session, error) {
	if mock.GetFunc == nil {
		panic("CacheMock.GetFunc: method is nil but Cache.Get was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCacheMockGet.Unlock()
	return mock.GetFunc(email)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCache.GetCalls())
func (mock *CacheMock) GetCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockCacheMockGet.RLock()
	calls = mock.calls.Get
	lockCacheMockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *CacheMock) Set(s *session.Session) {
	if mock.SetFunc == nil {
		panic("CacheMock.SetFunc: method is nil but Cache.Set was just called")
	}
	callInfo := struct {
		S *session.Session
	}{
		S: s,
	}
	lockCacheMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockCacheMockSet.Unlock()
	mock.SetFunc(s)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedCache.SetCalls())
func (mock *CacheMock) SetCalls() []struct {
	S *session.Session
} {
	var calls []struct {
		S *session.Session
	}
	lockCacheMockSet.RLock()
	calls = mock.calls.Set
	lockCacheMockSet.RUnlock()
	return calls
}
