// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-sessions-api/api"
	"github.com/ONSdigital/dp-sessions-api/session"
	"sync"
)

var (
	lockSessionUpdaterMockUpdate sync.RWMutex
)

// Ensure, that SessionUpdaterMock does implement SessionUpdater.
// If this is not the case, regenerate this file with moq.
var _ api.SessionUpdater = &SessionUpdaterMock{}

// SessionUpdaterMock is a mock implementation of api.SessionUpdater.
//
//     func TestSomethingThatUsesSessionUpdater(t *testing.T) {
//
//         // make and configure a mocked api.SessionUpdater
//         mockedSessionUpdater := &SessionUpdaterMock{
//             UpdateFunc: func(email string) (*session.Session, error) {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedSessionUpdater in code that requires api.SessionUpdater
//         // and then make assertions.
//
//     }
type SessionUpdaterMock struct {
	// UpdateFunc mocks the Update method.
	UpdateFunc func(email string) (*session.Session, error)

	// calls tracks calls to the methods.
	calls struct {
		// Update holds details about calls to the Update method.
		Update []struct {
			// Email is the email argument value.
			Email string
		}
	}
}

// Update calls UpdateFunc.
func (mock *SessionUpdaterMock) Update(email string) (*session.Session, error) {
	if mock.UpdateFunc == nil {
		panic("SessionUpdaterMock.UpdateFunc: method is nil but SessionUpdater.Update was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockSessionUpdaterMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockSessionUpdaterMockUpdate.Unlock()
	return mock.UpdateFunc(email)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedSessionUpdater.UpdateCalls())
func (mock *SessionUpdaterMock) UpdateCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockSessionUpdaterMockUpdate.RLock()
	calls = mock.calls.Update
	lockSessionUpdaterMockUpdate.RUnlock()
	return calls
}
