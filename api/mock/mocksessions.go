// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-sessions-api/api"
	"github.com/ONSdigital/dp-sessions-api/session"
	"sync"
)

var (
	lockSessionsMockNew sync.RWMutex
)

// Ensure, that SessionsMock does implement Sessions.
// If this is not the case, regenerate this file with moq.
var _ api.Sessions = &SessionsMock{}

// SessionsMock is a mock implementation of api.Sessions.
//
//     func TestSomethingThatUsesSessions(t *testing.T) {
//
//         // make and configure a mocked api.Sessions
//         mockedSessions := &SessionsMock{
//             NewFunc: func(email string) (*session.Session, error) {
// 	               panic("mock out the New method")
//             },
//         }
//
//         // use mockedSessions in code that requires api.Sessions
//         // and then make assertions.
//
//     }
type SessionsMock struct {
	// NewFunc mocks the New method.
	NewFunc func(email string) (*session.Session, error)

	// calls tracks calls to the methods.
	calls struct {
		// New holds details about calls to the New method.
		New []struct {
			// Email is the email argument value.
			Email string
		}
	}
}

// New calls NewFunc.
func (mock *SessionsMock) New(email string) (*session.Session, error) {
	if mock.NewFunc == nil {
		panic("SessionsMock.NewFunc: method is nil but Sessions.New was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockSessionsMockNew.Lock()
	mock.calls.New = append(mock.calls.New, callInfo)
	lockSessionsMockNew.Unlock()
	return mock.NewFunc(email)
}

// NewCalls gets all the calls that were made to New.
// Check the length with:
//     len(mockedSessions.NewCalls())
func (mock *SessionsMock) NewCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockSessionsMockNew.RLock()
	calls = mock.calls.New
	lockSessionsMockNew.RUnlock()
	return calls
}
